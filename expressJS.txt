⁡⁣⁣⁢Intro to expressJS:⁡

npm install express --> to download the framework and add to the nodeJS package.json file.

⁡⁣⁣⁢Getting Started with ExpressJS:⁡
      const express = require('express')
      const app = express()
      const port = 3000

      app.get('/', (req, res) => {
        res.send('<h1>Hello World!</h1>')
      })

      app.listen(port, () => {
        console.log(`Example app listening on port ${port}`)
      })

      results ==> Hello World!



⁡⁣⁣⁢NodeJS Event Emitter⁡
      This is used to alert/notify the dev once an action has occurred.
          const EventEmitter = require('events')
          const myEmitter = new EventEmitter();

          // First event listener
          myEmitter.on('event', () => {
          console.log("about page event has been triggered..");
          })

          const express = require('express')
          const app = express()
          const port = 3000

          app.get('/about', (req, res) => {
          res.send('<h1>Hello World!</h1>')
          // .emit() the event you want to be alerted on when something happens
          myEmitter.emit('event')
          })

          app.listen(port, () => {
          console.log(`Example app listening on port ${port}`)
          })

          ⁡⁢⁣⁣Note: we can also provide data to be returned when the event occurs. Example:⁡

              const EventEmitter = require('events')
              const myEmitter = new EventEmitter();

              // First event listener
              myEmitter.on('event', (data) => {
                console.log("about page event has been triggered..");
                // outputs the data from .emit()
                console.log(data);
              })

              const express = require('express')
              const app = express()
              const port = 3000

              app.get('/about', (req, res) => {
                res.send('<h1>Hello World!</h1>')
                // pass the data you want to be returned after the event.
                myEmitter.emit('event', {name: 'Dking'})
              })

              app.listen(port, () => {
                console.log(`Example app listening on port ${port}`)
              })



⁡⁣⁣⁢ExpressJS Routing:⁡
      We can use app.post, .get, .patch, .delete etc.
          
          // client sending GET request to the server.
          app.get('/about', (req, res) => {
            res.send('<h1>Hello World!</h1>')
            // pass the data you want to be returned after the event.
            myEmitter.emit('event', {name: 'Dking'})
          })

          // client sending a POST request to the server
          app.post('/', (req, res) => {
            res.json({data:"This is a POST data"})
          })


          ⁡⁢⁣⁣How to handle any/all undefined paths:⁡
              we use the: app.all()

              app.all('/*', (req, res) => {
                res.send("<h3>404 error !!</h3>")
              })



Dynamic Routing:
      